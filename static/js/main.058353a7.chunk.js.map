{"version":3,"sources":["audio/click1.wav","audio/click2.wav","audio/bleep1.wav","audio/bleep2.wav","audio/drum1.wav","audio/drum2.wav","components/Metronome.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Metronome","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","playing","count","bpm","beatsPerMeasure","click","click1","Audio","click2","bleep1","bleep2","drum1","drum2","startStop","bind","assertThisInitialized","playClick","handleBpmChange","handleTimeChange","handleClickChange","ci","clearCorrectingInterval","timer","setState","that","setCorrectingInterval","_this$state","play","event","target","value","alert","preventDefault","stopPropagation","_this$state2","react_default","a","createElement","className","type","min","max","onKeyDown","disableInput","onChange","onClick","checked","Component","Boolean","window","location","hostname","match","App","src_components_Metronome","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.058353a7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/click1.019cce61.wav\";","module.exports = __webpack_public_path__ + \"static/media/click2.e0eb710d.wav\";","module.exports = __webpack_public_path__ + \"static/media/bleep1.ac42357c.wav\";","module.exports = __webpack_public_path__ + \"static/media/bleep2.8fd60622.wav\";","module.exports = __webpack_public_path__ + \"static/media/drum1.c34a2988.wav\";","module.exports = __webpack_public_path__ + \"static/media/drum2.75ddd3de.wav\";","import React, { Component } from \"react\";\nimport click1 from \"../audio/click1.wav\";\nimport click2 from \"../audio/click2.wav\";\nimport bleep1 from \"../audio/bleep1.wav\";\nimport bleep2 from \"../audio/bleep2.wav\";\nimport drum1 from \"../audio/drum1.wav\";\nimport drum2 from \"../audio/drum2.wav\";\nimport \"./Metronome.css\";\nimport ci from 'correcting-interval';\n\nclass Metronome extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      playing: false,\n      count: 0,\n      bpm: 120,\n      beatsPerMeasure: 4,\n      click: \"Bleep\"\n    };\n\n    this.click1 = new Audio(click1);\n    this.click2 = new Audio(click2);\n    this.bleep1 = new Audio(bleep1);\n    this.bleep2 = new Audio(bleep2);\n    this.drum1 = new Audio(drum1);\n    this.drum2 = new Audio(drum2);\n\n    this.startStop = this.startStop.bind(this);\n    this.playClick = this.playClick.bind(this);\n    this.handleBpmChange = this.handleBpmChange.bind(this);\n    this.handleTimeChange = this.handleTimeChange.bind(this);\n    this.handleClickChange = this.handleClickChange.bind(this);\n  }\n\n  startStop() {\n    if (this.state.playing) {\n      //stops timer\n      ci.clearCorrectingInterval(this.timer);\n      this.setState({\n        playing: false\n      });\n    } else {\n      //starts timer with current bpm\n      var that = this;\n      this.timer = ci.setCorrectingInterval(function() {\n        that.playClick();\n      },\n        (60 / this.state.bpm) * 1000\n      );\n      this.setState(\n        {\n          count: 0,\n          playing: true\n          //plays a click \"immediately\" (after setState finishes)\n        },\n        this.playClick\n      );\n    }\n  };\n\n  playClick() {\n    const { count, beatsPerMeasure } = this.state;\n    //The first beat will have a different sound that the others\n    if (count % beatsPerMeasure === 0) {\n      switch (this.state.click) {\n        case \"Click\":\n          this.click2.play();\n          break;\n        case \"Bleep\":\n          this.bleep2.play();\n          break;\n        case \"808\":\n          this.drum2.play();\n          break;\n        default:\n          this.click2.play();\n      }\n    } else {\n      switch (this.state.click) {\n        case \"Click\":\n          this.click1.play();\n          break;\n        case \"Bleep\":\n          this.bleep1.play();\n          break;\n        case \"808\":\n          this.drum1.play();\n          break;\n        default:\n          this.click1.play();\n      }\n    }\n    //Keep track of which beat we're on\n    this.setState(state => ({\n      count: (state.count + 1) % state.beatsPerMeasure\n    }));\n  };\n\n  handleBpmChange(event) {\n    const bpm = event.target.value;\n\n    if (this.state.playing) {\n      //stop the old timer and start a new one\n      var that = this;\n      ci.clearCorrectingInterval(this.timer);\n      this.timer = ci.setCorrectingInterval(() => {\n        that.playClick();\n      },\n        (60 / this.state.bpm) * 1000\n      );\n      //Set the new bpm, and reset the beat counter\n      this.setState({\n        count: 0,\n        bpm\n      });\n    } else {\n      //otherwise just update the bpm\n      this.setState({ bpm });\n    }\n  };\n\n  handleTimeChange(event) {\n    if (event.target.value <= 20 && event.target.value >= 1) {\n      this.setState({\n        beatsPerMeasure: event.target.value\n      });\n    } else {\n      //disableInput should eliminate the need for this\n      alert(\"Please select a value between 1 & 20\");\n      this.setState({\n        beatsPerMeasure: 4\n      });\n    }\n  };\n\n  handleClickChange(event) {\n    this.setState({\n      click: event.target.value\n    });\n  };\n\n  disableInput(event) {\n    event.preventDefault();\n    event.stopPropagation();\n  };\n\n  componentWillUnmount() {\n    ci.clearCorrectingInterval(this.timer);\n    this.setState({\n      playing: false,\n      count: 0,\n      bpm: 120,\n      beatsPerMeasure: 4,\n      click: \"Click\"\n    });\n  };\n\n  render() {\n    const { playing, bpm, click } = this.state;\n\n    return (\n      <div className=\"metronome\">\n        <h1>React Metronome</h1>\n        <div className=\"time-signature\">\n          <fieldset>\n            <legend>{this.state.beatsPerMeasure}/4 Time</legend>\n            <input\n              type=\"number\"\n              min=\"1\"\n              max=\"20\"\n              onKeyDown={this.disableInput}\n              onChange={this.handleTimeChange}\n            />\n          </fieldset>\n        </div>\n        <br />\n        <div className=\"bpm-slider\">\n          <fieldset>\n            <legend>{bpm} BPM</legend>\n            <input\n              type=\"range\"\n              min=\"60\"\n              max=\"240\"\n              value={bpm}\n              onChange={this.handleBpmChange}\n            />\n            <button onClick={this.startStop}>\n              {playing ? \"Stop\" : \"Start\"}\n            </button>\n          </fieldset>\n        </div>\n        <br />\n        <div className=\"click-type\">\n          <fieldset>\n            <legend>{click}</legend>\n            <div className=\"click-input\">\n              <label>Click</label>\n              <input\n                type=\"radio\"\n                value=\"Click\"\n                checked={this.state.click === \"Click\"}\n                onChange={this.handleClickChange}\n              />\n              <label>Bleep</label>\n              <input\n                type=\"radio\"\n                value=\"Bleep\"\n                checked={this.state.click === \"Bleep\"}\n                onChange={this.handleClickChange}\n              />\n              <label>808</label>\n              <input\n                type=\"radio\"\n                value=\"808\"\n                checked={this.state.click === \"808\"}\n                onChange={this.handleClickChange}\n              />\n            </div>\n          </fieldset>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Metronome;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Metronome from \"./components/Metronome\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Metronome />\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n\nexport default App;\n"],"sourceRoot":""}